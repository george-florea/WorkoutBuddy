@using WorkoutBuddy.BusinessLogic.Implementation.ManageSplits.Models
@model SplitModel


<div class="container" style="display:flex; justify-content:center; height: 25rem;">
    <div style="border: 6px solid #d4f0a5;border-radius: 0.6rem;padding: 1rem 2rem;width: 35rem;height: 25rem; background-color: #393E46; color:  #d4f0a5">
        <h1 style="margin-left: -7%;border-bottom: 6px solid #d4f0a5;width: 114%; padding:0 0 3% 7%; color: #efefef">
            Edit the split
        </h1>
        <form asp-action="EditSplit" id="editsplitform" style="height:80%">
            <div class="d-flex flex-column justify-content-evenly" style="height:100%">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input asp-for="SplitId" class="form-control" value="@Model.SplitId" style="display:none" />
                <div>
                    <label asp-for="Name" class="control-label"></label>
                    <input id="SplitName" asp-for="Name" class="form-control" />
                    <span id="SplitNameSpan" asp-validation-for="Name" class="text-danger"></span>
                </div>
                <div>
                    <label asp-for="Description" class="control-label"></label>
                    <input asp-for="Description" class="form-control" />
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
                @*<div id="workout" style="display:none">
                @for (var i = 0; i < Model.Workouts.Count; i++)
                {
                <div id="container_@i" >
                <label class="control-label">Workout @(i+1):</label>
                <div id="muscleGroupSelector_@i" class="form-group card card-body" style="margin: 10px">
                <input id="isDeleted_@i" style="display: none" name="Workouts[@i].IsDeleted"/>
                <input name="Workouts[@i].Id" style="display:none" value="@Model.Workouts[i].Id"/>
                <label class="control-label">Workout name</label>
                <input name="Workouts[@i].WorkoutName" class="form-control" value="@Model.Workouts[i].WorkoutName"></input>
                <span asp-validation-for="Workouts[@i].WorkoutName"></span>

                <label class="control-label select-label">Muscle Groups</label>
                <select multiple class="form-select form-control">
                @foreach (var muscle in Model.MusclesGroups)
                {
                if (Model.Workouts[i].SelectedMuscleGroups.Contains(Int32.Parse(muscle.Value)))
                {
                <option value="@muscle.Value" selected>@muscle.Text</option>
                }
                else
                {
                <option value="@muscle.Value">@muscle.Text</option>
                }
                }
                </select>
                <button id = "deleteBtn_@i" class="btn btn-secondary" type="button">Delete Workout</button>
                </div>
                </div>

                }
                <button type="button" class="button" id="addWorkoutBtn">Add new workout</button>
                </div>*@
                <div>
                    <label name="IsPrivate" class="control-label">Is the split public?</label>
                    <input name="IsPrivate" id="privateBool" class="form-check-input" type="checkbox" checked="@Model.IsPrivate" />
                    <span asp-validation-for="IsPrivate" class="text-danger"></span>
                </div>
                <div style="text-align:center; margin: 5px 0">
                    <input type="submit" value="Edit" class="btn" style="width: 100%; background-color:#d4f0a5" />
                </div>
            </div>
        </form>
    </div>
</div>


<script src="~/js/Split/AddSplit.js"></script>
@*<script>
    let btn = document.getElementById('addWorkoutBtn');
    let i = '@Model.Workouts.Count'
    btn.onclick = e => {
        var myArray = [];
        @foreach (var item in Model.MusclesGroups)
        {
            @:myArray.push({ text: '@item.Text', value: '@item.Value' });
        }

        CreateWorkout(myArray, i)
        i++;
    }

    @for(var j = 0; j < Model.Workouts.Count; j++)
    {
        <text>
            var deleteBtn = document.getElementById('deleteBtn_@j')
            var div = document.getElementById('container_@j')
            var isDeletedInput = document.getElementById('isDeleted_@j')
            deleteBtn.onclick = e => {
                div.style.display = 'none'
                isDeletedInput.value = true
            }
        </text>
    }

</script>*@
@section Scripts {
    <script>
        let bool = document.getElementById("privateBool");

        bool.value = '@Model.IsPrivate';
        bool.checked = '@Model.IsPrivate';

        bool.onchange = e => {
            if (bool.checked == true) {
                bool.value = "false";
            }
            else {
                bool.value = "true";
            }
        }

        $('#SplitName').change(e => {
            $('#SplitNameSpan').text("");
        });

        /*
        let selected = [];
        let exercises = [];
        let exercise = [];
        let exSelect = '';

        @*@for (var index = 0; index < Model.Workouts.Count; index++)
    {
    @foreach (var item in Model.Workouts.ElementAt(index).SelectedMuscleGroups)
    {
    @:selected.push('@item');
    }
    @foreach (var item in Model.Workouts.ElementAt(index).Exercises)
    {
    @:exercise.push('@item.ToString()');
    }
    @:exercises.push(exercise);
    <text>
    $.ajax({
        type: "post",
        url: "https://localhost:44338/Api/FilteredExercises",
        success: (resp) => {
            filteredExercises = JSON.stringify(resp);
            ClearSelect('@index');
            buildDropdown(filteredExercises, '@index', exercises[@index]);
        },
        error: (err) => {
            console.log(err);
        },
        contentType: "application/json",
        data: JSON.stringify(selected)
    })
    selected = []
    exercise = []
    </text>
    }
    *@
        */
    </script>
}